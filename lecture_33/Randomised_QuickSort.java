
/*Randomised QuickSort : -> for sorted Inputs when the pivot element is at the last index
 * Time complexity of Quick sort algorithm becomes N^2 
 * Since the recursion tree expands in only one half either left subtree or right subtree
 * so to avoid this we are generating  a random index in range and swapping it with
 * the last index for each level of recursive call. Hence the sorted array becomes unsorted so 
 * the algorithm gives optimal time complexity O(NLogN) for the sorted array also.
 * */

package lecture_33;

import java.util.*;

public class Randomised_QuickSort {

	public static void main(String[] args) {

		int[] arr = { 1, 2, 3, 4, 5, 6, 7 };
		QuickSort(arr, 0, arr.length - 1);

		for (int num : arr) {
			System.out.print(num + " ");
		}
	}

	public static void QuickSort(int[] arr, int si, int ei) {

		if (si >= ei) {
			return;
		}
		int pi = partition(arr, si, ei);
		QuickSort(arr, si, pi - 1);
		QuickSort(arr, pi + 1, ei);
	}

	public static int partition(int[] arr, int si, int ei) {

		Random rn = new Random();
		int r = rn.nextInt(ei - si + 1) + si;
		int temp = arr[r]; // Swap the last element which is the pivot element with the random number index
		arr[r] = arr[ei]; // generated by Random function
		arr[ei] = temp;	//we are generating the random element and putting it to the last element, 
						//we don't want to change the nature of the code
					    //the time complexity to findout random number and swap it with the last element is O(1)
						//Hence the time complexity becomes average case (O)NLogN

		int item = arr[ei];
		int pi = si;

		for (int i = si; i < ei; i++) {
			if (arr[i] < item) {
				int ii = arr[pi];
				arr[i] = arr[pi];
				arr[pi] = ii;
				pi++;
			}
		}
		int ii = arr[ei];
		arr[ei] = arr[pi];
		arr[pi] = ii;

		return pi;

	}

}
